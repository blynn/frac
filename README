== Installation ==

The GMP library is required. Type:
 
  $ make

to compile.

Then try "pi 2000" to generate 2000 digits of pi using a continued
fraction. It takes longer than I had hoped, but it's faster than

  $ echo "scale = 2000; 4*a(1)" | bc -l

Also try "hakmem 1000" to compute 1000 digits of the example continued fraction
constant from HAKMEM, which compares favourably with:

  $ echo "scale=1000
          pi=4*a(1)
          x=2*sqrt(5)
          (sqrt(3/pi^2+e(1)))/((e(x)-1)/(e(x)+1)-s(69))" | bc -l

Unlike frac, bc can only output the final answer in one go after all
calculations are complete.

There's no API documentation; see the source.

== Bugs and other issues ==

I intend to devote time to projects that operate on real numbers rather than
study real numbers for its own sake. But perhaps then I'll find a perfect
application for continued fractions, which will push me to fix deficiencies in
this code:

- I want to replace the condition variable with a semaphore to silence Helgrind
  (whose documentation states that condition variables almost unconditionally
  and invariably raise false alarms).

- Computing the continued fraction expansion of pi from the Chudnovsky
  brothers' Ramanujan formula would be much faster. More constants could
  benefit from using efficiently computable sequences of narrower intervals
  for their continued fraction expansions.

- The API could use cosmetic surgery.

- The Makefile is fragile and annoying to maintain and use.

- The testing infrastructure needs upgrading.

- Much more, e.g. see TODOs sprinkled throughout the code.
